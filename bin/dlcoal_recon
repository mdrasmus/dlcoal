#!/usr/bin/env python
# DLCoal Reconciliation

import sys
import time
import random
from os.path import dirname
import optparse

# import dlcoal library
try:
    import dlcoal
except ImportError:
    sys.path.append(dirname(dirname(sys.argv[0])))
    import dlcoal

import dlcoal.recon

# import rasmus, compbio libs
from rasmus import util,  treelib
from compbio import phylo, birthdeath


#=============================================================================
# options
usage = "usage: %prog [options] GENE_TREE1 [GENE_TREE2 ...]"
o = optparse.OptionParser(usage=usage)
o.add_option("-s", "--stree", dest="stree", metavar="SPECIES_TREE",
             help="species tree file in newick format (myr)")
o.add_option("-S", "--smap", dest="smap", metavar="GENE_TO_SPECIES_MAP",
             help="gene to species map")
o.add_option("-n", "--popsize", dest="popsize", metavar="POPULATION_SIZE",
             type="float",
             help="Effective population size")
o.add_option("-D", "--duprate", dest="duprate", metavar="DUPLICATION_RATE",
             type="float",
             help="rate of a gene duplication (dups/gene/myr)")
o.add_option("-L", "--lossrate", dest="lossrate", metavar="LOSS_RATE",
             type="float",
             help="rate of gene loss (losses/gene/myr)")
o.add_option("-g", "--gentime", dest="gentime", metavar="GENRATION_TIME",
             type="float",
             help="generation time (years)")
o.add_option("-i", "--iter", dest="iter", metavar="ITERATIONS",
             type="int", default=10,
             help="number of search iterations")

g = optparse.OptionGroup(o, "File extensions")
o.add_option_group(g)
g.add_option("-I", "--inext", dest="inext", metavar="INPUT_EXT",
             default="",
             help="input file extension (default='')")
g.add_option("-O", "--outext", dest="outext", metavar="OUTPUT_EXT",
             default=".dlcoal",
             help="output file extension (default='.dlcoal')")


g = optparse.OptionGroup(o, "Miscellaneous")
o.add_option_group(g)
g.add_option("", "--nprescreen", dest="nprescreen", metavar="NUM_PRESCREENS",
             type="int", default=20,
             help="number of prescreening iterations")
g.add_option("", "--nsamples", dest="nsamples", metavar="NUM_SAMPLES",
             type="int", default=100,
             help="number of samples for dup-loss integration (default=100)")
g.add_option("", "--init-locus-tree", dest="init_locus_tree",
             metavar="TREE_FILE",
             help="initial locus tree for search")
g.add_option("-x", "--seed", dest="seed", metavar="RANDOM_SEED",
             type="int", default=None,
             help="random number seed")
g.add_option("-l", "--log", dest="log", action="store_true",
             help="if given, output debugging log")


conf, args = o.parse_args()

if len(args) == 0:
    o.print_help()
    sys.exit(1)

#=============================================================================

def check_tree(tree, name=""):
    """Ensure that tree is binary"""
    for node in tree:
        if len(node.children) not in (0, 2):
            raise Exception("tree is not binary: %s" % name)


#=============================================================================
# read inputs

treefile = args[0]
smap = phylo.read_gene2species(conf.smap)
stree = treelib.read_tree(conf.stree)
times = treelib.get_tree_timestamps(stree)
# branch lengths should be millions of years (myr)

if conf.init_locus_tree:
    init_locus_tree = treelib.read_tree(conf.init_locus_tree)
else:
    init_locus_tree = None

duprate = conf.duprate
lossrate = conf.lossrate
# rates should events/gene/myr


# get popsizes
#  NOTE: popsize is multiplied by 2 to account for diploid species.
#  Also popsize scaled to fit species tree time units
#  (* generation time / 1e6)
#  This is done in order to allow different generation times per species
#  tree branch, and keeps all trees (gene, locus, species) ultrametric.
if conf.popsize is None:
    # scale popsizes by generation time
    popsizes = {}
    for node in stree:
        popsizes[node.name] = (2 * float(node.data["pop"]) *
                               float(node.data["g"]) / 1e6)
else:
    popsizes = 2 * conf.popsize * conf.gentime / 1e6


# start logging
if conf.log:
    log_out = open(
        util.replace_ext(treefile, conf.inext, conf.outext + ".log"), "w")
else:
    log_out = dlcoal.NullLog()
    

# set random seed
if conf.seed is None:
    conf.seed = int(time.time() * 100) % sys.maxint
random.seed(conf.seed)
if dlcoal.dlcoalc:
    dlcoal.dlcoalc.srand(conf.seed)
log_out.write("seed: %d\n" % conf.seed)


# read and prepare coal_tree
coal_trees = list(treelib.iter_trees(treefile))
locus_trees = []

for coal_tree in coal_trees:
    check_tree(coal_tree, treefile)

    # remove bootstraps if they exist
    for node in coal_tree:
        if "boot" in node.data:
            del node.data["boot"]
    coal_tree.default_data.clear()

    # perform reconciliation
    maxrecon = dlcoal.recon.dlcoal_recon(
        coal_tree, stree, smap, popsizes, duprate, lossrate,
        premean=.5 * times[stree.root],
        nsamples=conf.nsamples, nprescreen=conf.nprescreen,
        nsearch=conf.iter, log=log_out, init_locus_tree=init_locus_tree)
    locus_trees.append(maxrecon["locus_tree"])


# make "consensus" reconciliation if multiple coal trees given
if len(coal_trees) > 1:
    # make consensus locus tree
    coal_tree = phylo.consensus_majority_rule(coal_trees, rooted=True)
    phylo.ensure_binary_tree(coal_tree)
    locus_tree = phylo.consensus_majority_rule(locus_trees, rooted=True)
    phylo.ensure_binary_tree(locus_tree)
    locus_recon = phylo.reconcile(locus_tree, stree, smap)
    maxrecon = {
        "coal_recon": phylo.reconcile(coal_tree, locus_tree, lambda x:x),
        "locus_tree": locus_tree,
        "locus_recon": locus_recon,
        "locus_events": phylo.label_events(locus_tree, locus_recon)}
    maxrecon["daughters"] = dlcoal.recon.propose_daughters(
        coal_tree, maxrecon["coal_recon"], locus_tree,
        maxrecon["locus_events"])


# write outputs
out = util.replace_ext(treefile, conf.inext, conf.outext)
dlcoal.write_dlcoal_recon(out, coal_tree, maxrecon)


